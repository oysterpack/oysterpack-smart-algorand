"""
Standardized message using MessagePack as the binary serialization format.

https://msgpack.org/
"""
from dataclasses import dataclass
from typing import Self

import msgpack

from oysterpack.core.ulid import HashableULID
from oysterpack.message.serializable import MessageType, Serializable


class MessageId(HashableULID):
    """
    Unique message ID
    """


@dataclass(slots=True)
class Message:
    """
    Generic Message using MessagePack as its underlying serialization format.
    """

    msg_id: MessageId
    msg_type: MessageType
    data: bytes

    @classmethod
    def create(cls, msg_type: MessageType, data: bytes) -> Self:
        """
        Constructs a new Message with an autogenerated message ID
        """
        return cls(
            msg_id=MessageId(),
            msg_type=msg_type,
            data=data,
        )

    @classmethod
    def from_serializable(cls, serializable: Serializable) -> Self:
        return cls.create(serializable.message_type(), serializable.pack())

    @classmethod
    def unpack(cls, packed: bytes) -> Self:
        """
        deserializes the message
        """
        (
            msg_type,
            msg_id,
            data,
        ) = msgpack.unpackb(packed, use_list=False)
        return cls(
            msg_id=MessageId.from_bytes(msg_id),
            msg_type=MessageType.from_bytes(msg_type),
            data=data,
        )

    def pack(self) -> bytes:
        """
        Serialize the message using MessagePack

        Notes
        -----
        - serialized message format: (MessageId, MessageType, MessageData)
        """
        return msgpack.packb(
            (
                self.msg_type.bytes,
                self.msg_id.bytes,
                self.data,
            )
        )
